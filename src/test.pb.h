// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_test_2eproto;
namespace test {
class EventData;
struct EventDataDefaultTypeInternal;
extern EventDataDefaultTypeInternal _EventData_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template <>
::test::EventData* Arena::CreateMaybeMessage<::test::EventData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace test {

// ===================================================================


// -------------------------------------------------------------------

class EventData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.EventData) */ {
 public:
  inline EventData() : EventData(nullptr) {}
  ~EventData() override;
  explicit PROTOBUF_CONSTEXPR EventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventData(const EventData& from);
  EventData(EventData&& from) noexcept
    : EventData() {
    *this = ::std::move(from);
  }

  inline EventData& operator=(const EventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventData& operator=(EventData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventData* internal_default_instance() {
    return reinterpret_cast<const EventData*>(
               &_EventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventData& a, EventData& b) {
    a.Swap(&b);
  }
  inline void Swap(EventData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventData& from) {
    EventData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "test.EventData";
  }
  protected:
  explicit EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 3,
    kChannelNameFieldNumber = 2,
    kCounterFieldNumber = 1,
  };
  // repeated int32 buffer = 3 [packed = true];
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;

  public:
  void clear_buffer() ;
  ::int32_t buffer(int index) const;
  void set_buffer(int index, ::int32_t value);
  void add_buffer(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_buffer();

  private:
  ::int32_t _internal_buffer(int index) const;
  void _internal_add_buffer(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_buffer();

  public:
  // string channel_name = 2;
  void clear_channel_name() ;
  const std::string& channel_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* ptr);

  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(
      const std::string& value);
  std::string* _internal_mutable_channel_name();

  public:
  // int32 counter = 1;
  void clear_counter() ;
  ::int32_t counter() const;
  void set_counter(::int32_t value);

  private:
  ::int32_t _internal_counter() const;
  void _internal_set_counter(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.EventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> buffer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _buffer_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::int32_t counter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventData

// int32 counter = 1;
inline void EventData::clear_counter() {
  _impl_.counter_ = 0;
}
inline ::int32_t EventData::counter() const {
  // @@protoc_insertion_point(field_get:test.EventData.counter)
  return _internal_counter();
}
inline void EventData::set_counter(::int32_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:test.EventData.counter)
}
inline ::int32_t EventData::_internal_counter() const {
  return _impl_.counter_;
}
inline void EventData::_internal_set_counter(::int32_t value) {
  ;
  _impl_.counter_ = value;
}

// string channel_name = 2;
inline void EventData::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
}
inline const std::string& EventData::channel_name() const {
  // @@protoc_insertion_point(field_get:test.EventData.channel_name)
  return _internal_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventData::set_channel_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.EventData.channel_name)
}
inline std::string* EventData::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:test.EventData.channel_name)
  return _s;
}
inline const std::string& EventData::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void EventData::_internal_set_channel_name(const std::string& value) {
  ;


  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EventData::_internal_mutable_channel_name() {
  ;
  return _impl_.channel_name_.Mutable( GetArenaForAllocation());
}
inline std::string* EventData::release_channel_name() {
  // @@protoc_insertion_point(field_release:test.EventData.channel_name)
  return _impl_.channel_name_.Release();
}
inline void EventData::set_allocated_channel_name(std::string* value) {
  _impl_.channel_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_name_.IsDefault()) {
          _impl_.channel_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.EventData.channel_name)
}

// repeated int32 buffer = 3 [packed = true];
inline int EventData::_internal_buffer_size() const {
  return _impl_.buffer_.size();
}
inline int EventData::buffer_size() const {
  return _internal_buffer_size();
}
inline void EventData::clear_buffer() {
  _impl_.buffer_.Clear();
}
inline ::int32_t EventData::buffer(int index) const {
  // @@protoc_insertion_point(field_get:test.EventData.buffer)
  return _internal_buffer(index);
}
inline void EventData::set_buffer(int index, ::int32_t value) {
  _impl_.buffer_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.EventData.buffer)
}
inline void EventData::add_buffer(::int32_t value) {
  _internal_add_buffer(value);
  // @@protoc_insertion_point(field_add:test.EventData.buffer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& EventData::buffer() const {
  // @@protoc_insertion_point(field_list:test.EventData.buffer)
  return _internal_buffer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* EventData::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:test.EventData.buffer)
  return _internal_mutable_buffer();
}

inline ::int32_t EventData::_internal_buffer(int index) const {
  return _impl_.buffer_.Get(index);
}
inline void EventData::_internal_add_buffer(::int32_t value) { _impl_.buffer_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& EventData::_internal_buffer() const {
  return _impl_.buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* EventData::_internal_mutable_buffer() {
  return &_impl_.buffer_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace test


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
