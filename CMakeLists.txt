cmake_minimum_required(VERSION 3.2)
project(MpVsPb VERSION 0.1.0)

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/local CACHE PATH "default install directory" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

include(ExternalProject)

set(IS_DEBUG_BUILD CMAKE_BUILD_TYPE STREQUAL "Debug")

find_package(Git)
message(STATUS "GIT_EXECUTABLE='${GIT_EXECUTABLE}'")
set(CMAKE_CXX_STANDARD 20)
set(BOOST_VERSION 1.77.0)
set(PROTOBUF_VERSION v22.2)
set(MSGPACK_VERSION cpp-6.0.0)
set(CMAKE_BINARY_DIR ${CMAKE_INSTALL_PREFIX}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/lib)
set(CMAKE_BINARY_OUTPUT_DIRECTORY ${CMAKE_INSTALL_PREFIX}/bin)

if(${IS_DEBUG_BUILD})
  MESSAGE(STATUS "Add debug macro __DEBUG__")
  add_compile_definitions(__DEBUG__)
endif()

set(SOURCE_FILES
  src/main.cpp
  #src/test.pb.cc
)

ADD_EXECUTABLE(
  ${PROJECT_NAME}
  ${SOURCE_FILES}
)

set_target_properties(${PROJECT_NAME}
  PROPERTIES
  PUBLIC_HEADER "${EPICS_k2eg_INCLUDE}"
)
install(TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC src)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${CMAKE_INSTALL_PREFIX}/include)
TARGET_LINK_DIRECTORIES(${PROJECT_NAME} PUBLIC ${CMAKE_INSTALL_PREFIX}/lib)

# --------------------boost-----------------
if(WIN32)
  set(BOOST_BOOTSTRAP_CMD ${BOOST_GIT_REPO_DIR}/bootstrap.bat)

  # It was bjam at one point; it is now b2
  set(BOOST_BUILD_CMD ${BOOST_GIT_REPO_DIR}/b2.exe)
elseif(UNIX)
  set(BOOST_BOOTSTRAP_CMD ./${BOOST_GIT_REPO_DIR}/bootstrap.sh)
  set(BOOST_BUILD_CMD ./${BOOST_GIT_REPO_DIR}/b2)
endif()

ExternalProject_Add(
  boost
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/boost
  GIT_REPOSITORY https://github.com/boostorg/boost.git
  GIT_TAG boost-${BOOST_VERSION}
  BUILD_IN_SOURCE 1
  GIT_SUBMODULES_RECURSE true
  UPDATE_COMMAND ${BOOST_BOOTSTRAP_CMD}
  BUILD_COMMAND ${BOOST_BUILD_CMD} cxxstd=17 --with-system link=shared install --prefix=${CMAKE_INSTALL_PREFIX}
  INSTALL_COMMAND ""
  LOG_DOWNLOAD 1
  LOG_UPDATE 1
  LOG_CONFIGURE 1
  LOG_BUILD 1
  LOG_INSTALL 1
)

SET(BUILD_LIBRARY ${BUILD_LIBRARY} )
ADD_DEPENDENCIES(${PROJECT_NAME} boost)


# --------------------protobuf--------------------------
MESSAGE(STATUS "Configure protobuf version ${PROTOBUF_VERSION}")
ExternalProject_Add(
protobuf
PREFIX ${CMAKE_CURRENT_BINARY_DIR}/protobuf
GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git
GIT_TAG ${PROTOBUF_VERSION}
GIT_PROGRESS 1
LOG_DOWNLOAD 1
LOG_UPDATE 1
LOG_CONFIGURE 1
LOG_BUILD 1
LOG_INSTALL 1
CMAKE_ARGS
-DCMAKE_CXX_STANDARD=20
-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
-Dprotobuf_BUILD_TESTS:BOOL=OFF
-Dprotobuf_BUILD_EXAMPLES:BOOL=OFF
-Dprotobuf_WITH_ZLIB:BOOL=OFF
-Dprotobuf_BUILD_SHARED_LIBS=ON
-DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
-DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
)
find_package(Protobuf REQUIRED)
SET(BUILD_LIBRARY ${BUILD_LIBRARY} protobufd ${Protobuf_LIBRARIES} absl_base absl_spinlock_wait absl_log_internal_message absl_log_internal_check_op )
ADD_DEPENDENCIES(${PROJECT_NAME} protobuf)

# --------------------messagepack--------------------------
MESSAGE(STATUS "Configure messagepack version ${MSGPACK_VERSION}")
ExternalProject_Add(
    msgpack
PREFIX ${CMAKE_CURRENT_BINARY_DIR}/msgpack
GIT_REPOSITORY https://github.com/msgpack/msgpack-c.git
GIT_TAG ${MSGPACK_VERSION}
GIT_PROGRESS 1
LOG_DOWNLOAD 1
LOG_UPDATE 1
LOG_CONFIGURE 1
LOG_BUILD 1
LOG_INSTALL 1
CMAKE_ARGS
-DMSGPACK_USE_BOOST=OFF
-DMSGPACK_CXX20=ON
-DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
)
SET(BUILD_LIBRARY ${BUILD_LIBRARY})
ADD_DEPENDENCIES(${PROJECT_NAME} msgpack)


TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${BUILD_LIBRARY} pthread)
MESSAGE(STATUS "Linked library: ${BUILD_LIBRARY}")
MESSAGE(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")